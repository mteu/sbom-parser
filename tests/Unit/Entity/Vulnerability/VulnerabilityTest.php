<?php

declare(strict_types=1);

/*
 * This file is part of the package "mteu/sbom-parser".
 *
 * Copyright (C) 2025 Martin Adler <mteu@mailbox.org>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

namespace mteu\SbomParser\Tests\Unit\Entity\Vulnerability;

use mteu\SbomParser\Entity\Vulnerability\Vulnerability;
use mteu\SbomParser\Entity\Vulnerability\VulnerabilityRating;
use PHPUnit\Framework\Attributes\CoversClass;
use PHPUnit\Framework\Attributes\Test;
use PHPUnit\Framework\TestCase;

/**
 * VulnerabilityTest.
 *
 * @author Martin Adler <mteu@mailbox.org>
 * @license GPL-3.0-or-later
 */
#[CoversClass(Vulnerability::class)]
final class VulnerabilityTest extends TestCase
{
    #[Test]
    public function getHighestSeverityRatingReturnsNullWhenNoRatings(): void
    {
        $vulnerability = new Vulnerability(id: 'CVE-2023-1234');

        self::assertNull($vulnerability->getHighestSeverityRating());
    }

    #[Test]
    public function getHighestSeverityRatingReturnsNullWhenEmptyRatings(): void
    {
        $vulnerability = new Vulnerability(id: 'CVE-2023-1234', ratings: []);

        self::assertNull($vulnerability->getHighestSeverityRating());
    }

    #[Test]
    public function getHighestSeverityRatingReturnsOnlyRatingWhenOneExists(): void
    {
        $rating = new VulnerabilityRating(severity: 'medium');
        $vulnerability = new Vulnerability(id: 'CVE-2023-1234', ratings: [$rating]);

        self::assertSame($rating, $vulnerability->getHighestSeverityRating());
    }

    #[Test]
    public function getHighestSeverityRatingReturnsCriticalOverHigh(): void
    {
        $highRating = new VulnerabilityRating(severity: 'high');
        $criticalRating = new VulnerabilityRating(severity: 'critical');
        $vulnerability = new Vulnerability(id: 'CVE-2023-1234', ratings: [$highRating, $criticalRating]);

        self::assertSame($criticalRating, $vulnerability->getHighestSeverityRating());
    }

    #[Test]
    public function getHighestSeverityRatingReturnsHighOverMedium(): void
    {
        $mediumRating = new VulnerabilityRating(severity: 'medium');
        $highRating = new VulnerabilityRating(severity: 'high');
        $vulnerability = new Vulnerability(id: 'CVE-2023-1234', ratings: [$mediumRating, $highRating]);

        self::assertSame($highRating, $vulnerability->getHighestSeverityRating());
    }

    #[Test]
    public function getHighestSeverityRatingReturnsMediumOverLow(): void
    {
        $lowRating = new VulnerabilityRating(severity: 'low');
        $mediumRating = new VulnerabilityRating(severity: 'medium');
        $vulnerability = new Vulnerability(id: 'CVE-2023-1234', ratings: [$lowRating, $mediumRating]);

        self::assertSame($mediumRating, $vulnerability->getHighestSeverityRating());
    }

    #[Test]
    public function getHighestSeverityRatingReturnsLowOverInfo(): void
    {
        $infoRating = new VulnerabilityRating(severity: 'info');
        $lowRating = new VulnerabilityRating(severity: 'low');
        $vulnerability = new Vulnerability(id: 'CVE-2023-1234', ratings: [$infoRating, $lowRating]);

        self::assertSame($lowRating, $vulnerability->getHighestSeverityRating());
    }

    #[Test]
    public function getHighestSeverityRatingHandlesCaseInsensitive(): void
    {
        $mediumRating = new VulnerabilityRating(severity: 'MEDIUM');
        $highRating = new VulnerabilityRating(severity: 'High');
        $criticalRating = new VulnerabilityRating(severity: 'CrItIcAl');
        $vulnerability = new Vulnerability(id: 'CVE-2023-1234', ratings: [$mediumRating, $highRating, $criticalRating]);

        self::assertSame($criticalRating, $vulnerability->getHighestSeverityRating());
    }

    #[Test]
    public function getHighestSeverityRatingIgnoresNullSeverity(): void
    {
        $nullRating = new VulnerabilityRating(severity: null);
        $mediumRating = new VulnerabilityRating(severity: 'medium');
        $vulnerability = new Vulnerability(id: 'CVE-2023-1234', ratings: [$nullRating, $mediumRating]);

        self::assertSame($mediumRating, $vulnerability->getHighestSeverityRating());
    }

    #[Test]
    public function getHighestSeverityRatingIgnoresUnknownSeverity(): void
    {
        $unknownRating = new VulnerabilityRating(severity: 'unknown');
        $mediumRating = new VulnerabilityRating(severity: 'medium');
        $vulnerability = new Vulnerability(id: 'CVE-2023-1234', ratings: [$unknownRating, $mediumRating]);

        self::assertSame($mediumRating, $vulnerability->getHighestSeverityRating());
    }

    #[Test]
    public function getHighestSeverityRatingReturnsNullWhenAllRatingsInvalid(): void
    {
        $nullRating = new VulnerabilityRating(severity: null);
        $unknownRating = new VulnerabilityRating(severity: 'unknown');
        $vulnerability = new Vulnerability(id: 'CVE-2023-1234', ratings: [$nullRating, $unknownRating]);

        self::assertNull($vulnerability->getHighestSeverityRating());
    }

    #[Test]
    public function getHighestSeverityRatingReturnsFirstWhenSameSeverity(): void
    {
        $firstHigh = new VulnerabilityRating(severity: 'high');
        $secondHigh = new VulnerabilityRating(severity: 'high');
        $vulnerability = new Vulnerability(id: 'CVE-2023-1234', ratings: [$firstHigh, $secondHigh]);

        self::assertSame($firstHigh, $vulnerability->getHighestSeverityRating());
    }

    #[Test]
    public function getHighestSeverityRatingHandlesComplexMix(): void
    {
        $infoRating = new VulnerabilityRating(severity: 'info');
        $lowRating = new VulnerabilityRating(severity: 'low');
        $nullRating = new VulnerabilityRating(severity: null);
        $mediumRating = new VulnerabilityRating(severity: 'medium');
        $unknownRating = new VulnerabilityRating(severity: 'invalid');
        $highRating = new VulnerabilityRating(severity: 'high');

        $vulnerability = new Vulnerability(
            id: 'CVE-2023-1234',
            ratings: [$infoRating, $lowRating, $nullRating, $mediumRating, $unknownRating, $highRating]
        );

        self::assertSame($highRating, $vulnerability->getHighestSeverityRating());
    }
}
