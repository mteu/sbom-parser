<?php

declare(strict_types=1);

/*
 * This file is part of the package "mteu/sbom-parser".
 *
 * Copyright (C) 2025 Martin Adler <mteu@mailbox.org>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

namespace mteu\SbomParser\Entity\Vulnerability;

use mteu\SbomParser\Entity\Property;
use mteu\SbomParser\Entity\Tool;

/**
 * Vulnerability based on CycloneDX 1.4+ specification.
 *
 * @author Martin Adler <mteu@mailbox.org>
 * @license GPL-3.0-or-later
 */
final readonly class Vulnerability
{
    public function __construct(
        public ?string $bomRef = null,
        public ?string $id = null,
        public ?VulnerabilitySource $source = null,
        /** @var VulnerabilityReference[]|null */
        public ?array $references = null,
        /** @var VulnerabilityRating[]|null */
        public ?array $ratings = null,
        /** @var string[]|null */
        public ?array $cwes = null,
        public ?string $description = null,
        public ?string $detail = null,
        public ?string $recommendation = null,
        /** @var VulnerabilityAdvisory[]|null */
        public ?array $advisories = null,
        public ?\DateTimeImmutable $created = null,
        public ?\DateTimeImmutable $published = null,
        public ?\DateTimeImmutable $updated = null,
        /** @var VulnerabilityCredit[]|null */
        public ?array $credits = null,
        /** @var Tool[]|null */
        public ?array $tools = null,
        public ?VulnerabilityAnalysis $analysis = null,
        /** @var VulnerabilityAffects[]|null */
        public ?array $affects = null,
        /** @var Property[]|null */
        public ?array $properties = null,
    ) {
    }

    public function getId(): ?string
    {
        return $this->id;
    }

    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * @return VulnerabilityRating[]
     */
    public function getRatings(): array
    {
        return $this->ratings ?? [];
    }

    /**
     * @return string[]
     */
    public function getCwes(): array
    {
        return $this->cwes ?? [];
    }

    public function getHighestSeverityRating(): ?VulnerabilityRating
    {
        $ratings = $this->getRatings();
        if (count($ratings) === 0) {
            return null;
        }

        $severityOrder = [
            'critical' => 4,
            'high' => 3,
            'medium' => 2,
            'low' => 1,
            'info' => 0,
        ];

        $highestRating = null;
        $highestScore = -1;

        foreach ($ratings as $rating) {
            $severity = $rating->severity;
            if ($severity !== null && is_string($severity)) {
                $score = $severityOrder[strtolower($severity)] ?? -1;
                if ($score > $highestScore) {
                    $highestScore = $score;
                    $highestRating = $rating;
                }
            }
        }

        return $highestRating;
    }

    /**
     * @return VulnerabilityAffects[]
     */
    public function getAffects(): array
    {
        return $this->affects ?? [];
    }

    /**
     * @return VulnerabilityReference[]
     */
    public function getReferences(): array
    {
        return $this->references ?? [];
    }
}
